

@netapi_decorator("routers")
def delete_protocols_from_router(child, host, protocols_list, log = None):
    for pt_rt in protocols_list:
        log.info(f"Eliminando protocolo: {pt_rt}")
        child.sendline(f"no router {pt_rt}")
        child.expect(host)
  
@netapi_decorator("network")
def modify_router_settings(log = None):
    session_data = validate_session()
    if type(session_data) is Response:
        return session_data
    request_body = request.get_json()
    hosts = request_body["hosts"]
    hostname = request_body["hostname"] if "hostname" in request_body else None
    interfaces = request_body["interfaces"] if "interfaces" in request_body else None
    con_method = request_body["method"]
    last_host = hosts[len(hosts)-1]
    log.info(f"Modificando la configuracion general del router con IP: {last_host['ip']}")
    gns3_usr, gns3_pwd = get_gns3_config()
    try:
        if con_method == "ssh":
            # Primer inicio de sesion via ssh al primer router
            child = pxssh.pxssh()
            child.login(hosts[0]["ip"], gns3_usr,
                        gns3_pwd, auto_prompt_reset=False)
        else:
            # Inicio de sesion via telnet al primer router
            child = pexpect.spawn(f"telnet {hosts[0]['ip']}")
            child.expect("Username:")
            child.sendline(gns3_usr)
            child.expect("Password:")
            child.sendline(gns3_pwd)
            child.expect(hosts[0]['host'])
        
        if len(hosts) > 1:
            move_into_routers(child, hosts, gns3_usr, gns3_pwd, con_method)

        # Configuramos los parametros enviados
        child.sendline("config t")
        child.expect(last_host["host"])

        expect_host = last_host["host"]

        if hostname is not None:
            log.info(f"Cambiando hostname del router {last_host['host']} a {hostname}")
            child.sendline(f'hostname {hostname}')
            expect_host = hostname
            #log.debug(last_host)
            child.expect(expect_host)
        
        if interfaces is not None:
            log.info(f"Cambiando interfaces del router {last_host['host']}")
            for interface in interfaces:
                log.info(f"Configurando interfaz {interface['name']}")
                child.sendline(f'int {interface["name"]}')
                child.expect(expect_host)
                if "shutdown" in interface:
                    log.debug(f"Se ha apagado la interfaz {interface['name']}")
                    child.sendline("shut")
                    child.expect(expect_host)
                elif "remove" in interface:
                    log.debug(f"Se ha eliminado IP de la interfaz {interface['name']}")
                    child.sendline("no ip add *")
                    child.expect(last_host["host"])
                elif "power" in interface:
                    log.debug(f"Se ha encendido la interfaz {interface['name']}")
                    child.sendline("no shut")
                    child.expect(expect_host)
                else:
                    log.debug(f"Se ha configurado la IP: {interface['ip']} en la interfaz {interface['name']}")
                    child.sendline(f'ip add {interface["ip"]} {interface["mask"]}')
                    child.sendline("no shut")
                    child.expect(expect_host)
        
        child.sendline("end")
        child.expect(expect_host)
        child.sendline("wr mem")
        child.expect(expect_host)
        child.close()
        log.info(f"Se ha terminado de configurar el router {expect_host}")
        return netapi_response({ "message": "Se ha aplicado la configuracion" })
    except pexpect.TIMEOUT:
        log.warning(f"Tiempo de espera excedido")
        return netapi_response({"error": "Tiempo de espera en el router excedido"}, 500)
    except Exception as ex:
        log.error(str(ex))
        return netapi_response({"error": "Ha ocurrido un error al ejecutar el comando"}, 500)

@netapi_decorator("network")
def activate_ssh_in_router(log = None):
    session_data = validate_session()
    if type(session_data) is Response:
        return session_data
    
    request_body = request.get_json()
    hosts = request_body["hosts"]
    last_host = hosts[len(hosts)-1]
    log.info(f"Activando SSH en el router con IP: {last_host['ip']}")
    gns3_usr, gns3_pwd = get_gns3_config()
    try:
        child = pexpect.spawn(f"telnet {hosts[0]['ip']}")
        child.expect("Username:")
        child.sendline(gns3_usr)
        child.expect("Password:")
        child.sendline(gns3_pwd)
        child.expect(hosts[0]['host'])

        if len(hosts) > 1:
            move_into_routers(child, hosts, gns3_usr, gns3_pwd, "telnet")

        child.expect(last_host["host"])
        # Verificar si ya tiene  SSH

        child.sendline("sh run | s ssh")
        child.expect(last_host["host"])
        ssh_info = child.before.decode()

        if ssh_info != None:
            # Buscar si ya se tiene activado el protocolo
            if "transport input telnet ssh" in ssh_info:
                log.warning("El router ya tiene preconfigurado el protocolo SSH. Saliendo...")
                return netapi_response({ "message": "El router ya cuenta con conexi贸n SSH activa" }, 200)

        # Aplicar la configuraci贸n por defecto de SSH
        usr, pwd, secret, vty = get_gns3_ssh_config()
        commands = ["config t", f"enable secret {secret}", "service password encryption", 
        "int lo0", "ip add 10.0.0.1 255.255.255.0", "no shut", 
        "crypto key generate rsa usage-keys label sshkey modulus 1024", "ip ssh rsa keypair-name sshkey", 
        "ip ssh v 2", "ip ssh time-out 30", "ip ssh authentication-retries 3", "line vty 0 15", f"password {vty}",
        "login local", "transport input ssh telnet", "exit", f"username {usr} privilege 15 {pwd}"]

        log.info(f"Configurando SSH en el router {last_host['host']} - {last_host['ip']}")

        for command in commands:
            log.warning(f"Ejecutando {command} == {last_host['host']}")
            child.sendline(command)
            child.expect(last_host["host"])
        
        log.info(f"Se ha terminado de configurar el acceso SSH en el router {last_host['host']}")
        return netapi_response({ "message": "Se ha configurado la conexi贸n SSH en el router" }, 200)
    except pexpect.TIMEOUT:
        log.warning("Tiempo de espera de conexi贸n excedido")
        return netapi_response({"error": "Tiempo de espera en el router excedido"}, 500)
    except Exception as ex:
        log.error(str(ex))
        return netapi_response({"error": "Ha ocurrido un error al ejecutar el comando"}, 500)
